%%% (c) 2009 Tomas Hlavaty

currentdict/systemdict currentdict put

systemdict/{/mark cvx put
systemdict/[/mark cvx put

systemdict/]
/counttomark cvx
/array cvx
/astore cvx
/exch cvx
/pop cvx
5 array astore cvx put

systemdict/}/] cvx/cvx cvx 2 array astore cvx put

%[1 2 3] =

systemdict/def{currentdict 2 index 2 index put pop pop} put

%% math

/abs{.math(abs)1 .call}def
/.acos{.math(acos)1 .call}def
/.asin{.math(asin)1 .call}def
/atan{exch .math(atan)1 .call}def
/.atan2{.math(atan2)2 .call}def
/ceiling{.math(ceil)1 .call}def
/cos{.math(cos)1 .call}def
/.exp{.math(exp)1 .call}def
/floor{.math(floor)1 .call}def
/log{.math(log)1 .call}def
/.max{.math(max)2 .call}def
/.min{.math(min)2 .call}def
/.pow{.math(pow)2 .call}def
/.random{.math(random)0 .call}def
/rand{.random}def % TODO follow spec
/round{.math(round)1 .call}def
/sin{.math(sin)1 .call}def
/sqrt{.math(sqrt)1 .call}def
/.tan{.math(tan)1 .call}def
/truncate{.math(truncate)1 .call}def % TODO Math.truncate does not exist!

/.e{.math(E)get}def
/.ln2{.math(LN2)get}def
/.ln10{.math(LN10)get}def
/.log2e{.math(LOG2E)get}def
/.log10e{.math(LOG10E)get}def
/.pi{.math(PI)get}def
/.sqrt1_2{.math(SQRT1_2)get}def
/.sqrt2{.math(SQRT2)get}def

/sub{neg add}def
/idiv{div .floor}def

%% stack

/dup{0 index}def

%% conditionals

/true .true def
/false .false def
/null .null def

/ne{eq not}def
/ge{lt not}def
/le{1 index 1 index eq 3 1 roll lt or}def
/gt{le not}def
/if{{}ifelse}def

/loop{0 exch 0 exch 1 exch for}def
/repeat{1 1 4 2 roll for}def

%% html5

/.gget{.gc exch get}def
/.gput{.gc 3 1 roll exch put}def
/.gcall0{.gc 3 1 roll .call pop}def
/.gcall1{.gc 3 1 roll .call}def
/.gcanvas{(canvas).gget}def
/.gdim{.gcanvas exch(height)exch put .gcanvas exch(width)exch put}def
/.gbox{.gdim pop pop} def % TODO compute properly

%% canvas

/.save{(save)0 .gcall0}def
/.restore{(restore)0 .gcall0}def
/.scale{(scale)2 .gcall0}def
/.rotate{(rotate)1 .gcall0}def
/.translate{(translate)2 .gcall0}def
/.transform{(transform)6 .gcall0}def
/.setTransform{(setTransform)6 .gcall0}def
/.createLinearGradient{(createLinearGradient)4 .gcall1}def
/.createRadialGradient{(createRadialGradient)6 .gcall1}def
/.createPattern{(createPattern)2 .gcall1}def
/.clearRect{(clearRect)4 .gcall0}def
/.fillRect{(fillRect)4 .gcall0}def
/.strokeRect{(strokeRect)4 .gcall0}def
/.beginPath{(beginPath)0 .gcall0}def
/.closePath{(closePath)0 .gcall0}def
/.moveTo{(moveTo)2 .gcall0}def
/.lineTo{(lineTo)2 .gcall0}def
/.quadraticCurveTo{(quadraticCurveTo)4 .gcall0}def
/.bezierCurveTo{(bezierCurveTo)6 .gcall0}def
/.arcTo{(arcTo)5 .gcall0}def
/.rect{(rect)4 .gcall0}def
/.arc{(arc)6 .gcall0}def
/.fill{(fill)0 .gcall0}def
/.stroke{(stroke)0 .gcall0}def
/.clip{(clip)0 .gcall0}def
/.isPointInPath{(isPointInPath)2 .gcall1}def
/.fillText{(fillText)4 .gcall0}def
/.strokeText{(strokeText)4 .gcall0}def
/.measureText{(measureText)1 .gcall1}def
/.drawImage1{(drawImage1)5 .gcall0}def
/.drawImage2{(drawImage2)9 .gcall0}def
/.createImageData1{(createImageData1)1 .gcall1}def
/.createImageData2{(createImageData2)2 .gcall1}def
/.getImageData{(getImageData)4 .gcall1}def
/.putImageData{(putImageData)7 .gcall0}def

/.getGlobalAlpha{(globalAlpha).gget}def
/.getGlobalCompositeOperation{(globalCompositeOperation).gget}def
/.getStrokeStyle{(strokeStyle).gget}def
/.getFillStyle{(fillStyle).gget}def
/.getLineWidth{(lineWidth).gget}def
/.getLineCap{(lineCap).gget}def
/.getLineJoin{(lineJoin).gget}def
/.getMiterLimit{(miterLimit).gget}def
/.getShadowOffsetX{(shadowOffsetX).gget}def
/.getShadowOffsetY{(shadowOffsetY).gget}def
/.getShadowBlur{(shadowBlur).gget}def
/.getShadowColor{(shadowColor).gget}def
/.getFont{(font).gget}def
/.getTextAlign{(textAlign).gget}def
/.getTextBaseline{(textBaseline).gget}def

/.setGlobalAlpha{(globalAlpha).gput}def
/.setGlobalCompositeOperation{(globalCompositeOperation).gput}def
/.setStrokeStyle{(strokeStyle).gput}def
/.setFillStyle{(fillStyle).gput}def
/.setLineWidth{(lineWidth).gput}def
/.setLineCap{(lineCap).gput}def
/.setLineJoin{(lineJoin).gput}def
/.setMiterLimit{(miterLimit).gput}def
/.setShadowOffsetX{(shadowOffsetX).gput}def
/.setShadowOffsetY{(shadowOffsetY).gput}def
/.setShadowBlur{(shadowBlur).gput}def
/.setShadowColor{(shadowColor).gput}def
/.setFont{(font).gput}def
/.setTextAlign{(textAlign).gput}def
/.setTextBaseline{(textBaseline).gput}def

%% PostScript

/.deg2rad{.pi 180 div mul}def

/identmatrix{pop [1 0 0 1 0 0]}def % TODO fill
/matrix{6 array identmatrix}def

/.cx 0 def
/.cy 0 def
/.px 0 def
/.py 0 def
/.tm0 matrix def
/.tm matrix def
/.tmd matrix def

/.setPoint{/.cy exch def/.cx exch def}def
/.setPath{/.py exch def/.px exch def}def

/currentpoint{.cx .cy}def

/setmatrix{/.tm exch def}def

/..p{2 dict begin/y exch def/x exch def}def
/..P{end}def
/..tm{6 dict begin/ty exch def/tx exch def/d exch def/c exch def/b exch def/a exch def}def
/..TM{end}def
/.x{a x mul c y mul tx add add}def
/.y{b x mul d y mul ty add add}def
/.mmul{}def % TODO
/.tmu{/.cx .x def/.cy .y def/.tmd .tmd}def % TODO
%– initmatrix – 	Set CTM to device default
%matrix defaultmatrix matrix 	Fill matrix with device default matrix
%matrix currentmatrix matrix 	Fill matrix with CTM

/translate{2 copy ..p 1 0 0 1 6 4 roll ..tm .tmu ..TM ..P .translate}def % TODO
%tx ty matrix translate matrix 	Define translation by (tx , ty)

%sx sy scale – 	Scale user space by sx and sy
%sx sy matrix scale matrix 	Define scaling by sx and sy

%angle rotate – 	Rotate user space by angle degrees
%angle matrix rotate matrix 	Define rotation by angle degrees

%matrix concat – 	Replace CTM by matrix ´ CTM
%matrix1 matrix2 matrix3 concatmatrix matrix3 	Fill matrix3 with matrix1 ´ matrix2

/transform{..p .tm ..tm .x .y ..TM ..P}def % TODO
%x y matrix transform x¢ y¢ 	Transform (x, y) by matrix

%dx dy dtransform dx¢ dy¢ 	Transform distance (dx, dy) by CTM
%dx dy matrix dtransform dx¢ dy¢ 	Transform distance (dx, dy) by matrix

%x¢ y¢ itransform x y 	Perform inverse transform of (x¢, y¢) by CTM
%x¢ y¢ matrix itransform x y 	Perform inverse transform of (x¢, y¢) by matrix

%dx¢ dy¢ idtransform dx dy 	Perform inverse transform of distance (dx¢, dy¢) by CTM
%dx¢ dy¢ matrix idtransform dx dy 	Perform inverse transform of distance (dx¢, dy¢) by matrix

%matrix1 matrix2 invertmatrix matrix2 	Fill matrix2 with inverse of matrix1


/gsave{.save}def
/grestore{.restore}def
/rectclip{.clipRect}def
/rectfill{.fillRect}def
/rectstroke{.strokeRect}def
/newpath{.beginPath}def
/closepath{.closePath}def
/moveto{2 copy .setPoint 2 copy .setPath .moveTo/.tm0 matrix def}def
/lineto{2 copy .setPoint 2 copy .setPath .lineTo/.tm0 matrix def}def
/arcto{.arcTo}def

/setlinewidth{.setLineWidth}def
/setlinecap{.setLineCap}def % TODO
/setlinejoin{.setLineJoin}def % TODO
/setmiterlimit{.setMiterLimit}def

/currentlinewidth{.getLineWidth}def
/currentlinecap{<</butt 0/round 1/square 2>> .getLineCap get}def
/currentlinejoin{<</miter 0/round 1/bevel 2>> .getLineJoin get}def
/currentmiterlimit{.getMiterLimit}def

/setgray{255 mul dup dup .rgb dup .setStrokeStyle .setFillStyle}def
/setrgbcolor{3{255 mul 3 1 roll} repeat .rgb dup .setStrokeStyle .setFillStyle}def
/setfont{} def % TODO C.font = N + "pt " + F.V;
/clippath{0 0 .gcanvas(width)get .gcanvas(height)get .rect}def % TODO
/show{currentpoint 3 2 roll .fillText .strokeText}def % TODO
/rlineto{lineto}def % TODO

/currentflat{42}def
/setflat{pop}def

/transform{}def % TODO
/itransform{}def % TODO

/currentpoint{0 0}def % TODO

/showpage{}def

/arc{.deg2rad exch .deg2rad exch true(arc)6 .gcall0}def % TODO currentpoint
/arcn{.deg2rad exch .deg2rad exch false(arc)6 .gcall0}def % TODO currentpoint

/fill{.fill newpath currentpoint moveto}def % TODO

/setdash{pop pop}def

/stroke{.stroke newpath currentpoint moveto}def

/curveto{2 copy .setPoint .bezierCurveTo}def

/grestoreall{}def % TODO

%% PDF

/w{setlinewidth}def
/J{setlinecap}def % TODO
/j{setlinejoin}def % TODO
/M{setmitterlimit}def
/d{setdash}def % TODO
/ri{}def % TODO
/i{}def % TODO
/gs{}def % TODO
/q{gsave}def
/Q{grestore}def
/cm{.transform}def
/m{newpath moveto}def % TODO only if not m previously
/l{lineto}def
/c{.bezierCurveTo}def
/v{currentpoint cp2 p3 c}def % TODO fix arg order
/y{cp1 p3 p3 c}def % TODO fix arg order
/h{closepath}def % TODO
/re{.rect}def % TODO really, or x y m , x+w y l , x+w y+h l , x y+h l , h
/S{stroke}def
/s{h S}def
/f{fill}def % TODO
/F{f}def
/f*{}def % TODO
/B{f S}def
/B*{f* S}def
/b{h B}def
/b*{h B*}def
/n{}def % TODO
/W{clip}def % TODO
/W*{clip}def % TODO
/BT{}def % TODO
/ET{}def % TODO
/Tc{}def % TODO
/Tw{}def % TODO
/Tz{}def % TODO
/TL{}def % TODO
/Tf{setfont}def % TODO
/Tr{}def % TODO
/Ts{}def % TODO
/Td{}def % TODO
/TD{}def % TODO
/Tm{}def % TODO
/T*{}def % TODO
/Tj{show}def % TODO
/TJ{}def % TODO
/'{}def % TODO
/"{}def % TODO
/d0{}def % TODO
/d1{}def % TODO
/CS{}def % TODO
/cs{}def % TODO
/SC{}def % TODO
/SCN{}def % TODO
/sc{}def % TODO
/scn{}def % TODO
/G{}def % TODO
/g{}def % TODO
/RG{}def % TODO
/rg{3{255 mul 3 1 roll} repeat .rgb dup .setStrokeStyle .setFillStyle}def % TODO
/K{}def % TODO
/k{}def % TODO
/sh{}def % TODO
/BI{}def % TODO
/ID{}def % TODO
/EI{}def % TODO
/Do{}def % TODO
/MP{}def % TODO
/DP{}def % TODO
/BMC{}def % TODO
/BDC{}def % TODO
/EMC{}def % TODO
/BX{}def % TODO
/EX{}def % TODO

%% finish

/userdict 1000 dict def
userdict begin
