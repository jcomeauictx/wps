#+options: author:nil num:nil creator:nil timestamp:nil

PostScript and PDF interpreter in JavaScript

PostWeb \\
WebScript

TODO reuse parsed wps.wps

QQQ

Everything is interpreted.  Compilation is translation to lower
abstraction level or precomputing.

psi/z-matrix.c
Resource/Init/opdfread.ps

* PostScript interpreter

- stack
- function dictionary
- data types
- reader
- interpreter/evaluator
- native bindings (JavaScript FFI)
- PostScript and PDF API

PDF is stateless?

PostScript is stateful?

#+begin_html
<style>
tt {background-color:#fdf}
canvas {width:12em;height:12em;border:1px dashed black}
/*canvas {width:10em;height:10em;border:1px dashed black;position:relative;top:0;left:0}*/
</style>
#+end_html

#+html: <div id="wps" style="display:none">
#+include "wps.wps" src text
#+html: </div>
#+begin_html
<script type="text/javascript" src="wps.js"></script>
<script>
function $(Id) {return document.getElementById(Id);}
function $$(Id) {return $(Id).textContent;}
</script>
#+end_html

** Trivial example

#+html: <div id="example1">
#+begin_src js2
function example1() {
   // define stack and operators
   var Os = [];
   var Sd = {};
   var Ds = [Sd];
   Sd["+"] = function() {Os.push(Os.pop() + Os.pop());};
   Sd["="] = function() {alert(Os.pop());};
   // compute 1 2 = 3 + =
   Os.push(1);
   Os.push(2);
   Sd["="]();
   Os.push(3);
   Sd["+"]();
   Sd["="]();
}
#+end_src
#+html: </div>
#+begin_html
<script>
function ex1() {
   eval($$("example1"));
   example1();
}
</script>
<button onclick="javascript:ex1()">Eval</button>
"<tt>1 2 = 3 + =</tt>" from harcoded stack
#+end_html

** Example with PostScript reader

#+html: <div id="example2">
#+begin_src js2
function example2(T) {
   var Os = [];
   var Sd = {};
   var Ds = [Sd];
   var Es = [];
   Sd["+"] = function() {Os.push(Os.pop() + Os.pop());};
   Sd["dup"] = function() {var X = Os.pop(); Os.push(X); Os.push(X);};
   Sd["="] = function() {alert(Os.pop());};
   ps0(T, Os, Ds, Es); // read and interpret code T
}
#+end_src
#+html: </div>
#+begin_html
<script>
function ex2() {
   eval($$("example2"));
   example2($$("ex2"));
}
</script>
<button onclick="javascript:ex2()">Eval</button>
"<tt id="ex2">12 34 + dup = 56 + =</tt>" from string
#+end_html

** Example with recursion

#+html: <div id="example3">
#+begin_src ps
% based on the example from
% http://en.literateprograms.org/Fibonacci_numbers_(PostScript)
% 0, 1, 1, 2, 3, 5, 8, 13, 21

%0.1 1.2 2.3 4.5 3 {pstack} repeat
%0.1 1.2 2.3 4.5 3 {pstack} .repeat

%/fibonacci{0.1 1.2 2.3 4.5 pstack 3{pstack}repeat pstack}def
%fibonacci

%/fibonacci{0.1 1.2 2.3 4.5 3{1 add pstack}repeat}def
%fibonacci

%0 1 1 4 {add} for pstack clear % 10
%1 2 6 { } for pstack clear % 1 3 5
%3 -.5 1 { } for pstack clear % 3.0 2.5 2.0 1.5 1.0

4 {(abc)} repeat pstack clear % (abc) (abc) (abc) (abc)
1 2 3 4 3 {pop} repeat pstack clear % 1 % Pops 3 values (down to the 1)
4 { } repeat pstack clear % % Does nothing four times
mark 0 {(will not happen)} repeat pstack clear % mark

%false false or =
%true false or =
%false true or =
%true true or =

% from http://www.math.ubc.ca/~cass/graphics/manual/pdf/ch9.pdf

/factorial { 1 dict begin
  /n exch def
  n 0 eq {
    1
  }{
    n n 1 sub factorial mul
  } ifelse
end } def

%5 factorial pstack clear

% args: array a of numbers
% effect: sorts the array in order
/bubblesort { 4 dict begin
  /a exch def
  /n a length 1 sub def
n 0 gt {
  % at this point only the n+1 items in the bottom of a remain to be sorted
  % the largest item in that block is to be moved up into position n
  n {
    0 1 n 1 sub {
      /i exch def
      a i get a i 1 add get gt {
         % if a[i] > a[i+1] swap a[i] and a[i+1]
        a i 1 add
        a i get
        a i a i 1 add get
         % set new a[i] = old a[i+1]
        put
         % set new a[i+1] = old a[i]
        put
      } if
    } for
    /n n 1 sub def
  } repeat
} if
end } def

%[5 4 3 2 1 0] bubblesort pstack clear

%{1 2 add {2 mul}} pstack exec pstack exec pstack clear

%1 2 1 {add {(hi)} dup} repeat pstack clear
%1 2 {} pstack clear
%1 2 {} exec pstack clear

%(de repeat (N . B)
%   (when (gt0 N)
%      (run B 1) )
%   (when (< 1 N)
%      (repeat (- N 1) B) ) )

%/fibonacci { % n --
%  1 sub
%  1 1 3 2 roll
%  { 2 copy add 3 2 roll pop pstack} repeat
%} bind def

%0 fibonacci = % 0
%1 fibonacci = % 1
%2 fibonacci = % 1
%6 fibonacci = % 8


% http://en.wikibooks.org/wiki/Transwiki:Fibonacci_number_program#PostScript

%/fib1 {
%  1 dup
%  3 -1 roll {
%    dup
%    3 -1 roll
%    dup
%    4 1 roll
%    add
%    3 -1 roll
%  } repeat
%} def

%5 fib1 pstack clear

/fib2 {
  dup dup 1 eq exch 0 eq or not {
    dup 1 sub fib2
    exch 2 sub fib2
    add
  } if
} def

%5 fib2 pstack clear

#+end_src
#+html: </div>
#+begin_html
<script>
function ex3() {wps(null, [$$("wps"), $$("example3")]);}
</script>
<button onclick="javascript:ex3();">Eval</button>
#+end_html

* The interpreter

A few initial ideas:

- Learn and implement a Forth like language.  PostScript seems a great choice:
  - It has the right syntax and stack based evaluation.
  - It is practical and widely used.
  - It has long sucessful history in print and publishing.
  - It is a predecessor of PDF.
  - Almost everything (e.g. editors, pictures, documentation) can be
    reused to a great extent.
  - It is ideal for HTML 5 canvas experiments because from the
    PostScript point of view, canvas is just another low level device.
- Flexibility and simplicity first.
  - Optimize for fast change, not for raw running speed.  Keep the
    code small and regular if possible.
  - Can JavaScript be used as a portable assembler for web?  Is
    building scripting languages on top of JavaScript feasible and
    efficient enough for real-world use?  If not, why?  Find the
    limits.
- Keep the language/environment specific core as small as possible.
  - Allow to port the interpreter to other languages on both
    client and server side.
  - Be open for the possibility of running "the same code" on both the
    client and server side.
- Can PDF documents be displayed in web browsers without server-side
  image rendering?
  - Implement a canvas based version of PDF page contents in [[http://ondoc.logand.com][OnDoc]].
- Investigate the possibility of implementing a Lisp interpreter
  suitable for production use in web applications.

Operators beginning with dot are non-standard low level operators
which are subject to change.

** PostScript data types

| category  | type        | executable | example                | spec               |
|-----------+-------------+------------+------------------------+--------------------|
| simple    | boolean     |            | true false             |                    |
|           | fontID      |            |                        |                    |
|           | integer     |            | 42 -123 0              |                    |
|           | mark        |            |                        |                    |
|           | name        | Y          | draw /draw             |                    |
|           | null        |            | null                   |                    |
|           | operator    | Y          |                        |                    |
|           | real        |            | 3.14 1e-10             |                    |
|           | save        |            |                        |                    |
| composite | array       | Y          | [1 /hi 3.14] {1 2 add} |                    |
|           | condition   |            |                        | Display PostScript |
|           | dictionary  |            | <</a 1/b 2>>           |                    |
|           | file        |            |                        |                    |
|           | gstate      |            |                        | Level 2            |
|           | lock        |            |                        | Display PostScript |
|           | packedarray |            |                        | Level 2            |
|           | string      | Y          | (hi) <a33f>            |                    |

** Low level data types

| category  | type       | direct | literal | executable |
|-----------+------------+--------+---------+------------|
| simple    | boolean    | Y      | Y       | -          |
|           | number     | Y      | Y       | -          |
|           | mark       | -      | Y       | -          |
|           | name       | -      | Y       | Y          |
|           | null       | Y      | Y       | -          |
|           | operator   | Y      | -       | Y          |
| composite | array      | Y      | Y       | -          |
|           | proc       | -      | -       | Y          |
|           | dictionary | Y      | Y       | -          |
|           | string     | Y      | Y       | -          |

All types are represented directly in JavaScript except:

| type            | representation  |
|-----------------+-----------------|
| mark            | unique object   |
| literal name    | quoted symbol   |
| executable name | unquoted symbol |
| operator        | function        |
| proc            | quoted array    |

*** exec

pop any, case:

| type            | result            |
|-----------------+-------------------|
| executable name | exec value        |
| operator        | apply operator    |
| proc            | exec each element |

otherwise push the original value

*** cvx

| from         | to              | how     |
|--------------+-----------------+---------|
| literal name | executable name | unquote |
| array        | proc            | quote   |
| string       | proc            | ~ parse |

** Stack



* Drawing with PostScript

Measuring angles:

| language/device | unit |
|-----------------+------|
| canvas          | rad  |
| PostScript      | deg  |
| PDF             | rad  |

** Bowtie example

#+html: <canvas id="xbowtie"></canvas>
#+html: <div id="bowtie">
#+include "bowtie.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xbowtie"), [$$("wps"), $$("bowtie")]);
</script>
#+end_html

** Digital clock example

#+html: <canvas id="xclock"></canvas>
#+html: <div id="clock">
#+include "clock.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xclock"), [$$("wps"), $$("clock")]);
</script>
#+end_html

** Analog clock example

#+html: <canvas id="xclock2"></canvas>

Click on the clock to start/stop it.

#+html: <div id="clock2">
#+include "clock2.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xclock2"), [$$("wps"), $$("clock2")]);
</script>
#+end_html

** Tiger example

Text drawing in canvas is not working in Firefox and Opera, works in
Chrome.

Firefox throws error about linecap and linejoin not being supported.
However, it does not throw error about missing support for text
drawing.

#+plot: title:"tiger.eps drawing times" ind:1 deps:(2) type:2d with:histograms set:"yrange [0:]" set:"xlabel 'browser'" set:"ylabel 'time [s]'" set:"style histogram gap 1" file:"tiger.png" set:"term png size 400, 300"
| browser | time [s] |
|---------+----------|
| Chrome  |      3.8 |
| Opera   |     13.4 |
| Firefox |     19.5 |

file:tiger.png

** Fern example

from http://www.pvv.ntnu.no/~andersr/fractal/PostScript.html

#+html: <canvas id="xfern"></canvas>

#+html: <div id="fern">
#+include "fern.wps" src ps
#+html: </div>
#+begin_html
<script>
//wps($("xfern"), [$$("wps"), $$("fern")]);
</script>
#+end_html

** Tree example

from http://www.pvv.ntnu.no/~andersr/fractal/PostScript.html

#+html: <canvas id="xtree2"></canvas>

#+html: <div id="tree2">
#+include "tree2.ps" src ps
#+html: </div>
#+begin_html
<script>
//wps($("xtree2"), [$$("wps"), $$("tree2")]);
</script>
#+end_html

** Other

1 0 0 0 setcmykcolor    % 100% cyan \\
0 0 1 0 setcmykcolor    % 100% yellow

** Fill example

#+html: <canvas id="xfill"></canvas>
#+html: <div id="fill">
#+include "fill.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xfill"), [$$("wps"), $$("fill")]);
</script>
#+end_html

** Chessboard example

#+html: <canvas id="xchess"></canvas>
#+html: <div id="chess">
#+include "chess.eps" src ps
#+html: </div>
#+begin_html
<div id="ychess" style="display:none">
0 0 180 180 .gbox
%1 0 0 -1 0 180 cm
</div>
<script>
wps($("xchess"), [$$("wps"), $$("ychess"), $$("chess")]);
</script>
#+end_html

* Drawing with PDF

PDF documents have the origin of the coordinate system in the bottom
left corner while HTML 5 canvas int the top left corner.  Thus, some
of the following pictures are displayed upside down (unless an
explicit coordinate transformation was added which is not part of the
visible example code).

** Heart example

#+html: <canvas id="xheart"></canvas>
#+html: <div id="heart">
#+include "heart.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xheart"), [$$("wps"), $$("heart")]);
</script>
#+end_html

** Rectangle example

#+html: <canvas id="xrect"></canvas>
#+html: <div id="rect">
#+include "rect.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xrect"), [$$("wps"), $$("rect")]);
</script>
#+end_html

** Triangles example

#+html: <canvas id="xtriangles"></canvas>
#+html: <div id="triangles">
#+include "triangles.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xtriangles"), [$$("wps"), $$("triangles")]);
</script>
#+end_html

** Smile example

#+html: <canvas id="xsmile"></canvas>
#+html: <div id="smile">
#+include "smile.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xsmile"), [$$("wps"), $$("smile")]);
</script>
#+end_html

** Star example

#+html: <canvas id="xstar"></canvas>
#+html: <div id="star">
#+include "star.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xstar"), [$$("wps"), $$("star")]);
</script>
#+end_html

** Squares 2 example

#+html: <canvas id="xsquares2"></canvas>
#+html: <div id="squares2">
#+include "squares2.wpdf" src ps
#+html: </div>
#+begin_html
<script>
wps($("xsquares2"), [$$("wps"), $$("squares2")]);
</script>
#+end_html

** Junk

#+begin_html
<pre>

1 0 0 -1 0 446 cm % 0,0 in bottom left corner

% Ex4

q
%BT
%/F1 24 Tf
%1 0 0 1 260 600 Tm
%/CS1 cs 
%63 127 127 sc
%(Hello World)Tj
%ET
%100 0 127 sc
%/CS2 CS
%0 0 1 SC
%315 572 m
%299 528 l
%339 554 l
%291 554 l
%331 528 l
%b
q
0 255 255 rg
4 0 0 4 315 550 cm
0 5.5 m
-4 -5.5 l
 6  1   l
-6  1   l
 4 -5.5 l
f
Q
%/CS1 cs
%63 127 127 sc
1 0 0 1 315 490 cm
0 0 m
  -7  23         -40   19     -15 -17   c
  -7.5 -27.8   -11 -22       0 -35   c
  11 -22        7.5 -27.8    15 -17    c
  40  19          7    23        0   0 c
b
Q

% http://developer.mozilla.org/samples/canvas-tutorial/2_5_canvas_quadraticcurveto.html

%75 25 m
%25 25 25 62 5 c2
%25 100 50 100 c2
%50 120 30 125 c2
%60 120 65 100 c2
%125 100 125 62.5 c2
%125 25 75 25 c2
%S

%3 8 div 6 add .
%6 3 8 div add .

%8 7 3 mul sub .
%7 3 mul 8 exch sub .

/box {
  0 0 m
  72 0 l
  0 72 l
  -72 0 l
  h f
} def

1 0 0 1 -452 124 cm
box
0 setgray fill
1 0 0 1 27.0 36.0 cm
box
.4 setgray fill
1 0 0 1 28.8 39.6 cm
box
.8 setgray fill

% TODO not, and, or, xor
% TODO for loop exit
</pre>
#+end_html

/MediaBox [0 0 612 446]

#+begin_html
<script>
function xreq(Url, Cb, Er) {
//   var req = new XMLHttpRequest();
//   alert(Url);
//   req.open('GET', Url, true);
//   req.onreadystatechange = function (e) {
//      if(req.readyState == 4) {
//         if(req.status == 200) Cb(req.responseText);
//         else if(Er) Er();
//      }
//   };
//   req.send(null);

   try {netscape.security.PrivilegeManager.enablePriviledge(priviledge);}
   catch(e) {}
   var req = new XMLHttpRequest();
   req.open('GET', Url, false); 
   req.send(null);
   if(req.status == 200) Cb(req.responseText);
   else alert("uff");
}
</script>
#+end_html

#+html: <canvas id="c"></canvas>

[[http://svn.ghostscript.com/viewvc/trunk/gs/examples/tiger.eps?view=co][tiger.eps]]:
#+html: <button onclick="javascript:xreq('http://svn.ghostscript.com/viewvc/trunk/gs/examples/tiger.eps?view=co', wps)">Draw</button>
#+html: <button onclick="javascript:xreq('file:///home/tomas/src/pdf4web/tiger.eps', alert)">Draw</button>

* JavaScript bindings

http://www.whatwg.org/specs/web-apps/current-work/#the-canvas-element

??? rlineto rmoveto findfont scalefont setfont show rightshow
stringwidth arcn loop/exit forall cvs array put get length aload
astore mark ashow widthshow awidthshow kshow currentpoint makefont
charpath setdash image putinterval dict begin settransfer
readhexstring flattenpath curveto pathbbox pathforall search transform
itransform definefont setrgbcolor setcharwidth

 setmatrix

octal chars in string \234


/Times-Roman findfont typography 15 scalefont setfont

** Built-in operators

| category       | in                      | operator | out                                                         |
|----------------+-------------------------+----------+-------------------------------------------------------------|
| Trivial        |                         | true     | true                                                        |
|                |                         | false    | false                                                       |
|                |                         | null     | null                                                        |
| Math           | x                       | neg      | -x                                                          |
|                | x y                     | add      | x+y                                                         |
|                | x y                     | mul      | x*y                                                         |
|                | x y                     | div      | x/y                                                         |
|                | x y                     | mod      | x%y                                                         |
| Stack          |                         | mark     | mark                                                        |
|                | x y                     | exch     | y x                                                         |
|                |                         | clear    |                                                             |
|                | x                       | pop      |                                                             |
|                | any_n ...any_0 n        | index    | any_n ... any_0 any_n                                       |
|                | any_(n-1) ... any_0 n j | roll     | any_((j-1) mod n) ... any_0 ... any_(n-1) ... any_(j mod n) |
|                | any_1 ... any_n n       | copy     | any_1 ... any_n any_1 ... any_n                             |
| Array          | array                   | length   | n                                                           |
| Conditionals   | x y                     | eq       | bool                                                        |
|                | x y                     | lt       | bool                                                        |
|                | y                       | not      | bool                                                        |
|                | x y                     | and      | z                                                           |
|                | x y                     | or       | z                                                           |
|                | bool then else          | ifelse   |                                                             |
|                | n proc                  | repeat   |                                                             |
|                | i j k proc              | for      |                                                             |
| Debugging      | x                       | .        |                                                             |
|                |                         | pstack   |                                                             |
| Dictionaries   | n                       | dict     | dict                                                        |
|                | dict key                | get      | any                                                         |
|                | dict key any            | put      |                                                             |
|                | sym proc                | def      |                                                             |
| Arrays         | n                       | array    | array                                                       |
| JavaScript FFI | dict key nargs          | .call    | any                                                         |
|                |                         | .gc      | gc                                                          |
|                |                         | .math    | Math                                                        |
| HTML 5         | r g b                   | .rgb     | text                                                        |
|                | r g b a                 | .rgba    | text                                                        |

** Core operators

| category     | in          | operator    | out    |
|--------------+-------------+-------------+--------|
| Math         |             | abs         |        |
|              |             | .acos       |        |
|              |             | .asin       |        |
|              |             | atan        |        |
|              |             | .atan2      |        |
|              |             | ceiling     |        |
|              |             | cos         |        |
|              |             | .exp        |        |
|              |             | floor       |        |
|              |             | log         |        |
|              |             | .max        |        |
|              |             | .min        |        |
|              |             | .pow        |        |
|              |             | .random     |        |
|              |             | rand        |        |
|              |             | round       |        |
|              |             | sin         |        |
|              |             | sqrt        |        |
|              |             | .tan        |        |
|              |             | truncate    |        |
|              |             | .e          |        |
|              |             | .ln2        |        |
|              |             | .ln10       |        |
|              |             | .log2e      |        |
|              |             | .log10e     |        |
|              |             | .pi         |        |
|              |             | .sqrt1_2    |        |
|              |             | .sqrt2      |        |
|              |             | sub         |        |
|              |             | idiv        |        |
| Stack        | x           | dup         | x x    |
| Conditionals | x y         | ne          | bool   |
|              | x y         | ge          | bool   |
|              | x y         | le          | bool   |
|              | x y         | gt          | bool   |
|              | bool proc   | if          |        |
| HTML 5       | key         | .gget       |        |
|              | any key     | .gput       |        |
|              | key nargs   | .gcall0     |        |
|              | key nargs   | .gcall1     |        |
|              |             | .gcanvas    | canvas |
|              | w h         | .gdim       |        |
|              | x0 y0 x1 y1 | .gbox       |        |
| PostScript   | gray        | setgray     |        |
|              | r g b       | setrgbcolor |        |
|              | ???         | setfont ?   |        |
|              |             | clippath ?  |        |
|              | text        | show ?      |        |
|              | x y         | rlineto     |        |

** Canvas methods

|   | in                                           | canvas                | out            | ps         | pdf         |
|---+----------------------------------------------+-----------------------+----------------+------------+-------------|
| / |                                              |                       |                | <          | <           |
|   |                                              | .save                 |                | gsave      | q           |
|   |                                              | .restore              |                | grestore   | Q           |
|   | x y                                          | scale                 |                | scale      | -           |
|   | angle                                        | rotate                |                | rotate     | -           |
|   | x y                                          | translate             |                | translate  | -           |
|   | m11 m12 m21 m22 dx dy                        | .transform            |                | -          | cm          |
|   | m11 m12 m21 m22 dx dy                        | .setTransform         |                | -          | -           |
|   | x0 y0 x1 y1                                  | .createLinearGradient | canvasGradient |            |             |
|   | x0 y0 r0 x1 y1 r1                            | .createRadialGradient | canvasGradient |            |             |
|   | image repetition                             | .createPattern        | canvasPattern  |            |             |
|   | x y w h                                      | .clearRect            |                | rectclip   |             |
|   | x y w h                                      | .fillRect             |                | rectfill   |             |
|   | x y w h                                      | .strokeRect           |                | rectstroke |             |
|   |                                              | .beginPath            |                | newpath    | m ?         |
|   |                                              | .closePath            |                | closepath  | ~ h ? ~ n ? |
|   | x y                                          | .moveTo               |                | moveto     | m ?         |
|   | x y                                          | .lineTo               |                | lineto     | l           |
|   | cpx cpy x y                                  | .quadraticCurveTo     |                |            |             |
|   | cp1x cp1y cp2x cp2y x y                      | .bezierCurveTo        |                |            | c           |
|   | x1 y1 x2 y2 radius                           | .arcTo                |                | arcto      |             |
|   | x y w h                                      | .rect                 |                | -          | ~ re        |
|   | x y radius startAngle endAngle anticlockwise | .arc                  |                | ~ arc      |             |
|   |                                              | fill                  |                | fill       | ~ f ?       |
|   |                                              | stroke                |                | stroke     | S           |
|   |                                              | clip                  |                | clip       | ~ W ?       |
|   | x y                                          | .isPointInPath        | boolean        |            |             |
|   | text x y                                     | .fillText1            |                |            |             |
|   | text x y maxWidth                            | .fillText2            |                |            |             |
|   | text x y                                     | .strokeText1          |                |            |             |
|   | text x y maxWidth                            | .strokeText2          |                |            |             |
|   | text                                         | .measureText          | textMetrics    |            |             |
|   | image dx dy                                  | .drawImage1           |                |            |             |
|   | image dx dy dw dh                            | .drawImage2           |                |            |             |
|   | image sx sy sw sh dx dy dw dh                | .drawImage3           |                |            |             |
|   | imagedata                                    | .createImageData1     | imageData      |            |             |
|   | sw sh                                        | .createImageData1     | imageData      |            |             |
|   | sx sy sw sh                                  | .getImageData         | imageData      |            |             |
|   | imagedata dx dy                              | .putImageData1        |                |            |             |
|   | imagedata dx dy dirtyX dirtyY dirtyW dirtyH  | .putImageData2        |                |            |             |

** Canvas attributes

|   | type | attribute                 | values                                             | ps            | pdf   |
|---+------+---------------------------+----------------------------------------------------+---------------+-------|
| / |      | <                         |                                                    | <             | <     |
|   | num  | .globalAlpha              | (1.0)                                              |               |       |
|   | str  | .globalCompositeOperation | (source-over)                                      |               |       |
|   | any  | .strokeStyle              | (black)                                            | ~ setdash ?   | ~ d ? |
|   | any  | .fillStyle                | (black)                                            |               |       |
|   | num  | .lineWidth                | (1)                                                | setlinewidth  | w     |
|   | str  | .lineCap                  | (butt) round square                                | ~ setlinecap  | J     |
|   | str  | .lineJoin                 | round bevel (miter)                                | ~ setlinejoin | j     |
|   | num  | .miterLimit               | (10)                                               | setmiterlimit | M     |
|   | num  | .shadowOffsetX            | (0)                                                |               |       |
|   | num  | .shadowOffsetY            | (0)                                                |               |       |
|   | num  | .shadowBlur               | (0)                                                |               |       |
|   | str  | .shadowColor              | (transparent black)                                |               |       |
|   | str  | .font                     | (10px sans-serif)                                  |               |       |
|   | str  | .textAlign                | (start) end left right center                      |               |       |
|   | str  | .textBaseline             | top hanging middle (alphabetic) ideographic bottom |               |       |

** Other operators

|   | canvas                                      | ps | pdf |
|---+---------------------------------------------+----+-----|
| / | <                                           |    |     |
|   | canvasGradient offset color *.addColorStop* |    |     |

** Other attributes

|   | dict             | type             | attribute | values | ps | pdf |
|---+------------------+------------------+-----------+--------+----+-----|
| / |                  |                  | <         |        | <  | <   |
|   | textMetrics      | num              | width     |        |    |     |
|   | imageData        | cnt              | width     |        |    |     |
|   | imageData        | cnt              | heigth    |        |    |     |
|   | imageData        | canvasPixelArray | data      |        |    |     |
|   | canvasPixelArray | cnt              | length    |        |    |     |

[IndexGetter, IndexSetter] CanvasPixelArray

** PostScript operators

|   | category | in      | operator   | out |
|---+----------+---------+------------+-----|
| / |          | <       | <          | <   |
|   |          | x y [m] | transform  | x y |
|   |          | x y [m] | itransform | x y |

** PDF operators

|   | category               | operator |                                                           |
|---+------------------------+----------+-----------------------------------------------------------|
| / |                        | <        |                                                           |
|   | General graphics state | w        | setlinewidth                                              |
|   |                        | J        | ~ setlinecap                                              |
|   |                        | j        | ~ setlinejoin                                             |
|   |                        | M        | setmiterlimit                                             |
|   |                        | d        | ~ setdash ?                                               |
|   |                        | ri       | {SetColorRenderingIntent}                                 |
|   |                        | i        | {1 .min setflat}                                          |
|   |                        | gs       | {SetExtGState}                                            |
|   | Special graphics state | q        | gsave                                                     |
|   |                        | Q        | grestore                                                  |
|   |                        | cm       | .transform   { //TempMatrix astore concat }               |
|   | Path construction      | m        | moveto                                                    |
|   |                        | l        | lineto                                                    |
|   |                        | c        | .bezierCurveTo (curveto)                                  |
|   |                        | v        | ! currentpoint cp2 p3 c { currentpoint 6 2 roll curveto } |
|   |                        | y        | ! cp1 p3 p3 c { 2 copy curveto }                          |
|   |                        | h        | closepath                                                 |
|   |                        | re       | ! x y m , x+w y l , x+w y+h l , x y+h l , h               |
|   | Path painting          | S        | stroke                                                    |
|   |                        | s        | h S                                                       |
|   |                        | f        | (fill)                                                    |
|   |                        | F        | f                                                         |
|   |                        | f*       | {eofill}                                                  |
|   |                        | B        | f S { gsave fill grestore stroke }                        |
|   |                        | B*       | f* S { gsave eofill grestore stroke }                     |
|   |                        | b        | h b { closepath gsave fill grestore stroke }              |
|   |                        | b*       | h B* { closepath gsave eofill grestore stroke }           |
|   |                        | n        | {newpath}                                                 |
|   | Clipping paths         | W        | clip                                                      |
|   |                        | W*       | {eoclip}                                                  |
|   | Text objects           | BT       |                                                           |
|   |                        | ET       | {grestore}                                                |
|   | Text state             | Tc       |                                                           |
|   |                        | Tw       |                                                           |
|   |                        | Tz       |                                                           |
|   |                        | TL       |                                                           |
|   |                        | Tf       |                                                           |
|   |                        | Tr       |                                                           |
|   |                        | Ts       |                                                           |
|   | Text positioning       | Td       |                                                           |
|   |                        | TD       |                                                           |
|   |                        | Tm       |                                                           |
|   |                        | T*       |                                                           |
|   | Text showing           | Tj       | ~ show                                                    |
|   |                        | TJ       |                                                           |
|   |                        | '        |                                                           |
|   |                        | "        |                                                           |
|   | Type 3 fonts           | d0       | setcharwidth                                                          |
|   |                        | d1       | setcachedevice                                                          |
|   | Color                  | CS       |                                                           |
|   |                        | cs       |                                                           |
|   |                        | SC       |                                                           |
|   |                        | SCN      |                                                           |
|   |                        | sc       |                                                           |
|   |                        | scn      |                                                           |
|   |                        | G        | g                                                         |
|   |                        | g        | setgray                                                   |
|   |                        | RG       | rg                                                        |
|   |                        | rg       | setrgbcolor                                               |
|   |                        | K        | k                                                         |
|   |                        | k        | setcmykcolor                                                          |
|   | Shading patterns       | sh       |                                                           |
|   | Inline images          | BI       |                                                           |
|   |                        | ID       |                                                           |
|   |                        | EI       |                                                           |
|   | XObjects               | Do       |                                                           |
|   | Marked content         | MP       |                                                           |
|   |                        | DP       |                                                           |
|   |                        | BMC      |                                                           |
|   |                        | BDC      |                                                           |
|   |                        | EMC      |                                                           |
|   | Compatibility          | BX       |                                                           |
|   |                        | EX       |                                                           |

* References

** PostScript in JavaScript by others

Somebody before: http://www.feiri.de/pcan/ RPN calculator with many
PostScript operators implemented directly in JavaScript.  Fast drawing
but not "real" PostScript.

Wish list: http://svgkit.sourceforge.net/

** Interesting PostScript applications

http://starynkevitch.net/Basile/NeWS_descr_oct_1993.html \\
http://www.art.net/studios/Hackers/Hopkins/Don/hyperlook/index.html \\
http://books.google.com/books?id=xHSoK66z34YC&pg=PA193 \\
http://www.art.net/studios/Hackers/Hopkins/Don/lang/NeWS.html \\
http://en.wikipedia.org/wiki/Display_PostScript

** Mess

http://canvaspaint.org/blog/2006/12/rendering-text/ \\
http://dev.opera.com/articles/view/html-5-canvas-the-basics/ \\
http://www.benjoffe.com/code/ \\
http://arapehlivanian.com/wp-content/uploads/2007/02/canvas.html

http://two.pairlist.net/pipermail/reportlab-users/2002-September/000599.html

http://www.capcode.de/help/put ref \\
http://www.math.ubc.ca/~cass/courses/ps.html ps operator summary \\
http://atrey.karlin.mff.cuni.cz/~milanek/PostScript/Reference/PSL2d.html \\
http://gauss.upf.es/www-storage/PS_Guide-1.0/operators.html \\
http://web.mit.edu/ghostscript/www/Language.htm \\
http://pages.cs.wisc.edu/~ghost/doc/gnu/7.05/Ps-style.htm \\
http://www.tailrecursive.org/postscript/operators.html \\

http://www.math.ubc.ca/~cass/courses/m308-7b/ch5.pdf

http://en.wikibooks.org/wiki/PostScript_FAQ

: http://www.nihilogic.dk/labs/canvas_sheet/HTML5_Canvas_Cheat_Sheet.png

http://dev.opera.com/articles/view/creating-pseudo-3d-games-with-html-5-can-1/

http://dev.opera.com/articles/view/html-5-canvas-the-basics/

js closure over value, not var!

http://www.pvv.ntnu.no/~andersr/fractal/PostScript.html
http://www.cs.unh.edu/~charpov/Programming/L-systems/
http://www.cs.unh.edu/~charpov/Programming/PostScript-primes/

http://www.adobe.com/print/features/psvspdf/index.html

   A PDF file is actually a PostScript file which has already been
   interpreted by a RIP and made into clearly defined objects.

http://c2.com/cgi/wiki?PortableDocumentFormat

   Unfortunately, Adobe have a history of making needlessly
   incompatible changes to the PDF format. It's not quite as bad as
   PostScript in terms of the number of broken documents out there,
   but it's definitely not a stable format.

hate pdf http://www.useit.com/alertbox/20030714.html

* Ideas

do better than http://processingjs.org/ http://processingjs.org/reference

try 3d interface in chrome

reactive programming http://conal.net/fran/tutorial.htm


* LINKS

http://www.math.ubc.ca/~cass/graphics/manual/

http://www.anastigmatix.net/postscript/MetaPre.html

http://svn.ghostscript.com/ghostscript/branches/icc_work/psi/estack.h

https://dev.mobileread.com/trac/iliados/browser/upstream/poppler/test/pdf-operators.c

http://developer.apple.com/documentation/GraphicsImaging/Conceptual/drawingwithquartz2d/dq_paths/dq_paths.html#//apple_ref/doc/uid/TP30001066-CH211-DontLinkElementID_10

http://easyweb.easynet.co.uk/~mrmeanie/matrix/matrices.htm

https://developer.mozilla.org/samples/canvas-tutorial/6_2_canvas_clipping.html

https://developer.mozilla.org/samples/canvas-tutorial/5_2_canvas_translate.html
