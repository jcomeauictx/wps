#+title: WPS: PostScript for the Web
#+description: PostScript and PDF interpreter for HTML 5 canvas
#+keywords: PostScript, PDF, interpreter, HTML 5, canvas, JavaScript
#+options: num:nil toc:t
#+macro: ps [[http://www.capcode.de/help/$1][$1]]

#+BEGIN_HTML:
<p class="h0">WPS: PostScript for the Web</p>
#+END_HTML

Welcome to WPS, a PostScript and PDF interpreter for HTML 5 canvas.

Note that to see and run the examples, JavaScript must be enabled and
your browser must support HTML 5 canvas (latest Firefox, Opera and
Chrome should work).

This document allows you to try simple PostScript programs in the WPS
sandbox.  A few examples are presented here accompanied by a brief
description of the interpreter and listing some implementation notes
for my future reference.

#+begin_html
<style>
tt {background-color:#fdf}
canvas {width:12em;height:12em;border:1px dashed black}
</style>
#+end_html

#+html: <div id="wps" style="display:none">
#+include "wps.wps" src text
#+html: </div>
#+begin_html
<script type="text/javascript" src="wps.js"></script>
<script>
function $(Id) {return document.getElementById(Id);}
function $$(Id) {return $(Id).textContent;}
</script>
#+end_html

* WPS sandbox

#+html: <canvas id="xsandbox"></canvas>
#+begin_html
<p>Sandbox:</p>
<p>
<textarea id="sandbox" style="width:100%" rows="18">
/n 10 def
/w 25 def

0 0 n w mul dup .gbox

4 dict begin
  0 1 n 1 sub {
    /i exch def
    /ii 1 1 n div i mul sub def
    0 1 n 1 sub {
      /j exch def
      /jj 1 1 n div j mul sub def
      ii jj 0 setrgbcolor
      w j mul w i mul w w rectfill
    } for
  } for
end
</textarea>
</p>
<script>
function sandbox() {wps($("xsandbox"), [$$("wps"), $("sandbox").value]);}
</script>
<button onclick="javascript:sandbox();">Run</button> code from sandbox.
#+end_html

* PostScript interpreter

A few initial ideas and questions:

- Learn and implement a Forth like language.  PostScript seems like a
  good choice:
  - It has the right syntax and stack based evaluation.
  - It is practical and widely used.
  - It has long sucessful history in print and publishing (and more).
  - It is a predecessor of PDF.
  - Almost everything (e.g. editors, pictures, documentation) can be
    reused to a great extent.
  - It is ideal for HTML 5 canvas experiments because from the
    PostScript point of view, canvas is just another low level device.
- Flexibility and simplicity first.
  - Optimize for fast code change, not for raw running speed.  Keep
    the code small and regular if possible.
  - Can JavaScript be used as a portable assembler for the Web?  Is
    building scripting languages on top of JavaScript feasible and
    efficient enough for real-world use?  If not, why?  Find the
    limits.
- Keep the language/environment specific core as small as possible.
  - Allow to port the interpreter to other languages on both
    client and server side.
  - Be open for the possibility of running "the same code" on both the
    client and server side.
- Can PDF documents be displayed in web browsers without server-side
  image rendering?
  - Implement a canvas based version of PDF page contents in [[http://ondoc.logand.com][OnDoc]].
- It might be possible to implement different backend devices to be
  used instead of HTML 5 canvas, for example a SVG device.
- Investigate the possibility of implementing a Lisp interpreter
  suitable for production use in web applications.

There are several things WPS is about:

- stack(s)
- function (operator) dictionary
- reader
- interpreter/evaluator
- data types
- native bindings (JavaScript FFI)
- PostScript and PDF API

[[http://en.wikipedia.org/wiki/PostScript][PostScript]] can be seen as a crossover between [[http://en.wikipedia.org/wiki/Forth_(programming_language)][Forth]] and [[http://en.wikipedia.org/wiki/LISP][Lisp]]
programming languages.  It is (roughly) a programming language with
[[http://en.wikipedia.org/wiki/Reverse_Polish_notation][RPN]], complex data types, garbage collection and specialized
drawing operators.

** Trivial example

The core essence of a RPN calculator is captured in the JavaScript
code bellow.

#+html: <div id="example1">
#+begin_src js2
function example1() {
   // define stack and operators
   var Os = [];
   var Sd = {};
   Sd["+"] = function() {Os.push(Os.pop() + Os.pop());};
   Sd["="] = function() {alert(Os.pop());};
   // compute 1 2 = 3 + =
   Os.push(1);
   Os.push(2);
   Sd["="]();
   Os.push(3);
   Sd["+"]();
   Sd["="]();
}
#+end_src
#+html: </div>
#+begin_html
<script>
function ex1() {
   eval($$("example1"));
   example1();
}
</script>
<button onclick="javascript:ex1()">Eval</button>
"<tt>1 2 = 3 + =</tt>"
#+end_html

=Os= stands for Operand Stack, which holds arguments for operators.
=Sd= is a System Dictionary which contains definitions of operators
(JavaScript functions in this case).

** Example with PostScript reader

PostScript has simple but non-trivial syntax so a reader which reads
text and creates internal PostScript objects is necessary.  The reader
and evaluator is called =ps0= (an empty PostScript interpreter) in the
JavaScript code bellow.

#+html: <div id="example2">
#+begin_src js2
function example2(T) {
   var Os = [];
   var Sd = {};
   var Ds = [Sd];
   var Es = [];
   Sd["+"] = function() {Os.push(Os.pop() + Os.pop());};
   Sd["dup"] = function() {var X = Os.pop(); Os.push(X); Os.push(X);};
   Sd["="] = function() {alert(Os.pop());};
   ps0(T, Os, Ds, Es); // read and interpret code T
}
#+end_src
#+html: </div>
#+begin_html
<script>
function ex2() {
   eval($$("example2"));
   example2($$("ex2"));
}
</script>
<button onclick="javascript:ex2()">Eval</button>
"<tt id="ex2">12 34 + dup = 56 + =</tt>"
#+end_html

=Ds= is a Dictionary Stack allowing users to redefine existing
operators and revert back to the original ones.  =Es= is an Execution
Stack which is used to implement a tail recursive evaluator.

** Example with recursion

It is possible to write recursive code in PostScript.  The following
PostScript code is from the [[http://www.math.ubc.ca/~cass/graphics/manual/pdf/ch9.pdf][Recursion in PostScript PDF document]].

#+html: <div id="example3">
#+begin_src ps
/factorial1 {
  1 dict begin
    /n exch def
    n 0 eq {1}{n n 1 sub factorial1 mul} ifelse
  end
} def

5 factorial1 =

/factorial2 {
  dup 0 eq {pop 1}{dup 1 sub factorial2 mul} ifelse
} def

5 factorial2 =
#+end_src
#+html: </div>
#+begin_html
<script>
function ex3() {wps(null, [$$("wps"), $$("example3")]);}
</script>
<button onclick="javascript:ex3();">Run</button> the example.
#+end_html

** Execution stack

The interpreter manages its Execution Stack explicitly.

Most operators simply:

1. get their arguments from the Operand Stack
2. perform some computation and/or side effects
3. push results to the Operand Stack

Some operators are more complex and involve some kind of control flow,
e.g. {{{ps(if)}}}, {{{ps(repeat)}}}, {{{ps(for)}}}, {{{ps(loop)}}}
operators.  Such operators:

1. get their arguments from the Operand Stack
2. perform single step of some computation and/or side effects
3. push the continuation (code and arguments to be executed next) to
   the Execution Stack

[[http://en.wikipedia.org/wiki/Tail_call][Tail Call Optimisation]] is implemented using [[http://logand.com/picoWiki/trampoline][trampoline]].  The evaluator
runs in a loop getting the next [[http://en.wikipedia.org/wiki/Continuation][continuation]] from the Execution Stack.
Operators that want to "continue" their execution (i.e. use the
interpreter to run other operators, including themselves) must perform
only one step at a time and save the remaining steps (continuation) on
the Execution Stack.

For example, the {{{ps(if)}}} operator saves the "then" or "else" code
branch to the Execution Stack depending on the value of the "test"
argument.  It does not "evaluate" the chosen branch directly
(recursively) but leaves the control to the evaluator loop.

The whole process of interpreting is fed from JavaScript strings which
are obtained from the content of HTML elements (sometimes hidden from
this document).

** PostScript data types

PostScript has quite rich set of data types.
See [[http://www.adobe.com/devnet/postscript/pdfs/PLRM.pdf][PostScript Language Reference PDF document]] for more details.

| category  | type        | executable | example                | spec               |
|-----------+-------------+------------+------------------------+--------------------|
| simple    | boolean     |            | true false             |                    |
|           | fontID      |            |                        |                    |
|           | integer     |            | 42 -123 0              |                    |
|           | mark        |            |                        |                    |
|           | name        | Y          | draw /draw             |                    |
|           | null        |            | null                   |                    |
|           | operator    | Y          |                        |                    |
|           | real        |            | 3.14 1e-10             |                    |
|           | save        |            |                        |                    |
| composite | array       | Y          | [1 /hi 3.14] {1 2 add} |                    |
|           | condition   |            |                        | Display PostScript |
|           | dictionary  |            | <</a 1/b 2>>           |                    |
|           | file        |            |                        |                    |
|           | gstate      |            |                        | Level 2            |
|           | lock        |            |                        | Display PostScript |
|           | packedarray |            |                        | Level 2            |
|           | string      | Y          | (hi) <a33f>            |                    |

The following data types are implemented in WPS:

| category  | type       | direct | literal | executable |
|-----------+------------+--------+---------+------------|
| simple    | boolean    | Y      | Y       | -          |
|           | number     | Y      | Y       | -          |
|           | mark       | -      | Y       | -          |
|           | name       | -      | Y       | Y          |
|           | null       | Y      | Y       | -          |
|           | operator   | Y      | -       | Y          |
| composite | array      | Y      | Y       | -          |
|           | proc       | -      | -       | Y          |
|           | dictionary | Y      | Y       | -          |
|           | string     | Y      | Y       | -          |

All the above types are represented directly in JavaScript except:

| type            | representation  |
|-----------------+-----------------|
| mark            | unique object   |
| literal name    | quoted symbol   |
| executable name | unquoted symbol |
| operator        | function        |
| proc            | quoted array    |

The interpreter needs to understand when to evaluate an argument.  The
distinction between a "literal" and "executable" is the key.

** Quoting and execution

There are two important operators to control evaluation at the
PostScript language level.

The {{{ps(exec)}}} operator usually leaves the argument as is except:

| type            | result            |
|-----------------+-------------------|
| executable name | exec value        |
| operator        | apply operator    |
| proc            | exec each element |

The {{{ps(cvx)}}} operator makes the argument "executable".  Usually
leaves the argument as is except:

| from         | to              | how     |
|--------------+-----------------+---------|
| literal name | executable name | unquote |
| array        | proc            | quote   |
| string       | proc            | ~ parse |

The ~ (tilde) character in the above table means that the
functionality has not been implemented yet.

* Drawing with PostScript

As a convention, operators beginning with dot are non-standard, low
level operators which are subject to change.

There is a difference in how HTML 5 canvas, PostScript and PDF measure
angles:

| language/device | unit |
|-----------------+------|
| canvas          | rad  |
| PostScript      | deg  |
| PDF             | rad  |

Many of the examples below set up their bounding box using the
=.gbox= operator, e.g.

#+begin_src ps
0 0 180 180 .gbox
#+end_src

Only the width and height of the canvas clipping rectangle are taken
into account so far.  The width and height is related to the drawing
units rather than to the size of the canvas element.

Both PostScript and PDF documents have the origin of the coordinate
system in the bottom left corner while HTML 5 canvas in the top left
corner.  Thus, some of the following pictures are displayed upside
down unless an explicit coordinate transformation was added.  This
discrepancy between the origin of the coordinate system is a problem
when drawing text because a simple coordinate transformation on its
own would draw the text upside-down.

** Bowtie example

See the [[https://developer.mozilla.org/en/drawing_graphics_with_canvas#section_6][original example]] in JavaScript.

#+html: <canvas id="xbowtie"></canvas>
#+html: <div id="bowtie">
#+include "bowtie.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xbowtie"), [$$("wps"), $$("bowtie")]);
</script>
#+end_html

** Analog clock example

See the [[http://oreilly.com/openbook/cgi/ch06_02.html][original example]].

Click on the clock to start/stop it.

#+html: <canvas id="xclock2"></canvas>

#+html: <div id="clock2">
#+include "clock2.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xclock2"), [$$("wps"), $$("clock2")]);
</script>
#+end_html

Running the clock keeps the CPU noticeably busy.  Chrome is best with
very little overhead, followed by Opera, and Firefox significantly
worse than the previous two browsers.  WPS seems to be fast enough for
one-off drawings, but its usability when running the interpreter in a
tight loop, depends on the efficiency of the host JavaScript
interpreter.

** Fill example

See the [[https://developer.mozilla.org/samples/canvas-tutorial/4_1_canvas_fillstyle.html][original example]] in JavaScript.

#+html: <canvas id="xfill"></canvas>
#+html: <div id="fill">
#+include "fill.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xfill"), [$$("wps"), $$("fill")]);
</script>
#+end_html

** Tiger example

The [[http://svn.ghostscript.com/viewvc/trunk/gs/examples/tiger.eps?view=co][original example]] is included with [[http://ghostscript.com/][Ghostscript]].

#+begin_html
<canvas id="xtiger" style="width:283pt;height:369pt">
</canvas>
<p>Drawing took <span id="msg">--</span> seconds.</p>
#+end_html

#+html: <div id="tiger" style="display:none">
#+html: <!-- TODO insert tiger.eps automatically -->
#+html: </div>

#+begin_html
<div id="tiger1" style="display:none">
0 0 567 739 .gbox
1 0 0 -1 0 739 .transform
/time1 .date (getTime) 0 .call def
</div>

<div id="tiger2" style="display:none">
/time2 .date (getTime) 0 .call def
(msg) .getElementById (textContent) time2 time1 sub 1000 div put
</div>

<script>
function tiger() {wps($("xtiger"), [$$("wps"), $$("tiger1"), $$("tiger"), $$("tiger2")]);}
</script>
<button onclick="javascript:tiger();">Draw</button> the tiger (be patient).
#+end_html

Is this an interesting JavaScript and canvas benchmark?

#+plot: title:"tiger.eps drawing times" ind:1 deps:(2 3 4) type:2d with:histograms set:"yrange [0:]" set:"xlabel 'browser'" set:"ylabel 'time [s]'" set:"style histogram gap 3" file:"tiger.png" set:"term png size 600, 300"
| browser          | WPS time [s] | WPS time (no bind) [s] | PostCanvas time [s] |
|------------------+--------------+------------------------+---------------------|
| Chrome           |          2.5 |                    3.8 |                 1.6 |
| Opera            |         15.9 |                   13.4 |                     |
| Firefox 3.0      |         15.4 |                   19.5 |                 7.4 |
| Firefox 3.5      |         11.6 |                        |                     |

[[http://www.feiri.de/pcan/][PostCanvas]] runs this [[http://www.feiri.de/pcan/example1.html][example]] about 1.5 times (Chrome) to 2 times
(Firefox) faster.  I am actually surprised that WPS runs only up to 2
times slower even though it interprets almost everything with minimal
number of operators coded directly in JavaScript (compared to
PostCanvas which implements all operators directly in JavaScript).

Another surprise to me is that I expected more significant speed up
after implementing the {{{ps(bind)}}} operator.  Why does Opera get
slower in this case?

It should be fairly easy to speed up WPS by adding more operators
implemented directly in JavaScript.  This could be done dynamically by
redefining/rebinding existing operators to their optimized JavaScript
version.  The speed of PostCanvas could probably be taken as the best
case that could be achieved by optimizing WPS though.

file:tiger.png

Firefox throws error about linecap and linejoin not being supported so
these were not used here.  Opera throws an error when running the
PostCanvas example.  The tiger does not look the same as rendered by
[[http://projects.gnome.org/evince/][Evince]] ([[http://poppler.freedesktop.org/][poppler]]/[[http://cairographics.org/][cairo]]) so maybe the linecap and linejoin are
really needed to get proper image as intended.

It is also interesting to observe that PDF operators and their names
probably came up from shortening/compressing "user-space" PostScript
operators in final PostScript files.  The tiger.eps file was created
in 1990 and contains some "shortcuts" that match PDF operators
standardised later.

* Drawing with PDF

PDF is rather complex format.  WPS implements only drawing operators
that can be present in PDF content streams.  The number of these
operators is fixed and limited.  Even though the full PostScript
language is not required, it can be convenient to implement them in
PostScript.

However, some aspects (e.g. colors) are handled differently in PDF
compared to PostScript and these differences are not addressed by WPS.
I imagine that a supporting server-side solution like [[http://logand.com/sw/ondoc/index.html][OnDoc]] would
provide necessary data (e.g. decomposing PDF into pages and objects,
providing HTML 5 web fonts and font metrics) and WPS would only draw
preprocessed page content.

Quoting from [[http://www.adobe.com/print/features/psvspdf/index.html][Adobe]]:

#+begin_quote
A PDF file is actually a PostScript file which has already been
interpreted by a RIP and made into clearly defined objects.
#+end_quote

** Heart example

See also the [[https://developer.mozilla.org/samples/canvas-tutorial/2_6_canvas_beziercurveto.html][original example]] in JavaScript.

#+html: <canvas id="xheart"></canvas>
#+html: <div id="heart">
#+include "heart.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xheart"), [$$("wps"), $$("heart")]);
</script>
#+end_html

** Rectangle example

#+html: <canvas id="xrect"></canvas>
#+html: <div id="rect">
#+include "rect.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xrect"), [$$("wps"), $$("rect")]);
</script>
#+end_html

** Triangles example

See also the [[https://developer.mozilla.org/samples/canvas-tutorial/2_3_canvas_lineto.html][original example]] in JavaScript.

#+html: <canvas id="xtriangles"></canvas>
#+html: <div id="triangles">
#+include "triangles.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xtriangles"), [$$("wps"), $$("triangles")]);
</script>
#+end_html

** Smile example

See also the [[http://developer.mozilla.org/samples/canvas-tutorial/2_2_canvas_moveto.html][original example]] in JavaScript.

#+html: <canvas id="xsmile"></canvas>
#+html: <div id="smile">
#+include "smile.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xsmile"), [$$("wps"), $$("smile")]);
</script>
#+end_html

** Star example

See also the [[http://www.adobe.com/technology/pdfs/presentations/KingPDFTutorial.pdf][original PDF document]] where this example is presented.

#+html: <canvas id="xstar"></canvas>
#+html: <div id="star">
#+include "star.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xstar"), [$$("wps"), $$("star")]);
</script>
#+end_html

** Squares example

See also the [[https://developer.mozilla.org/samples/canvas-tutorial/5_1_canvas_savestate.html][original example]] in JavaScript.

#+html: <canvas id="xsquares"></canvas>
#+html: <div id="squares">
#+include "squares.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xsquares"), [$$("wps"), $$("squares")]);
</script>
#+end_html

** Two squares example

See also the [[https://developer.mozilla.org/en/drawing_graphics_with_canvas][original example]] in JavaScript.

#+html: <canvas id="xsquares2"></canvas>
#+html: <div id="squares2">
#+include "squares2.wps" src ps
#+html: </div>
#+begin_html
<script>
wps($("xsquares2"), [$$("wps"), $$("squares2")]);
</script>
#+end_html

* Operators and JavaScript bindings

WPS implements a minimum core in JavaScript and the rest is
implemented in PostScript itself.

Many JavaScript data types map quite easily to PostScript data types
so native bindings can be implemented mostly in PostScript via
PostScript dictionaries.  [[http://www.whatwg.org/specs/web-apps/current-work/#the-canvas-element][HTML 5 canvas API]] bindings are quite
straightforward.  Probably the trickiest bit is implementing callbacks
to handle [[http://en.wikipedia.org/wiki/Document_Object_Model][DOM]] events using PostScript code.

** Built-in operators

| category       | in                      | operator         | out                                                         |
|----------------+-------------------------+------------------+-------------------------------------------------------------|
| Trivial        |                         | {{{ps(true)}}}   | true                                                        |
|                |                         | {{{ps(false)}}}  | false                                                       |
|                |                         | {{{ps(null)}}}   | null                                                        |
| Math           | x                       | {{{ps(neg)}}}    | -x                                                          |
|                | x y                     | {{{ps(add)}}}    | x+y                                                         |
|                | x y                     | {{{ps(mul)}}}    | x*y                                                         |
|                | x y                     | {{{ps(div)}}}    | x/y                                                         |
|                | x y                     | {{{ps(mod)}}}    | x%y                                                         |
| Stack          |                         | {{{ps(mark)}}}   | mark                                                        |
|                | x y                     | {{{ps(exch)}}}   | y x                                                         |
|                |                         | {{{ps(clear)}}}  |                                                             |
|                | x                       | {{{ps(pop)}}}    |                                                             |
|                | any_n ...any_0 n        | {{{ps(index)}}}  | any_n ... any_0 any_n                                       |
|                | any_(n-1) ... any_0 n j | {{{ps(roll)}}}   | any_((j-1) mod n) ... any_0 ... any_(n-1) ... any_(j mod n) |
|                | any_1 ... any_n n       | {{{ps(copy)}}}   | any_1 ... any_n any_1 ... any_n                             |
| Array          | array                   | {{{ps(length)}}} | n                                                           |
| Conditionals   | x y                     | {{{ps(eq)}}}     | bool                                                        |
|                | x y                     | {{{ps(lt)}}}     | bool                                                        |
|                | y                       | {{{ps(not)}}}    | bool                                                        |
|                | x y                     | {{{ps(and)}}}    | z                                                           |
|                | x y                     | {{{ps(or)}}}     | z                                                           |
|                | bool then else          | {{{ps(ifelse)}}} |                                                             |
|                | n proc                  | {{{ps(repeat)}}} |                                                             |
|                | i j k proc              | {{{ps(for)}}}    |                                                             |
| Debugging      | x                       | {{{ps(=)}}}      |                                                             |
|                |                         | {{{ps(pstack)}}} |                                                             |
| Dictionaries   | n                       | {{{ps(dict)}}}   | dict                                                        |
|                | dict key                | {{{ps(get)}}}    | any                                                         |
|                | dict key any            | {{{ps(put)}}}    |                                                             |
|                | sym proc                | {{{ps(def)}}}    |                                                             |
| Arrays         | n                       | {{{ps(array)}}}  | array                                                       |
| JavaScript FFI | dict key nargs          | .call            | any                                                         |
|                |                         | .gc              | gc                                                          |
|                |                         | .math            | Math                                                        |
| HTML 5         | r g b                   | .rgb             | text                                                        |
|                | r g b a                 | .rgba            | text                                                        |

Some of the above operators could be implemented in PostScript instead
of directly in JavaScript.

** Core operators

| category     | in          | operator              | out    |
|--------------+-------------+-----------------------+--------|
| Math         |             | {{{ps(abs)}}}         |        |
|              |             | .acos                 |        |
|              |             | .asin                 |        |
|              |             | {{{ps(atan)}}}        |        |
|              |             | .atan2                |        |
|              |             | {{{ps(ceiling)}}}     |        |
|              |             | {{{ps(cos)}}}         |        |
|              |             | .exp                  |        |
|              |             | {{{ps(floor)}}}       |        |
|              |             | {{{ps(log)}}}         |        |
|              |             | .max                  |        |
|              |             | .min                  |        |
|              |             | .pow                  |        |
|              |             | .random               |        |
|              |             | {{{ps(rand)}}}        |        |
|              |             | {{{ps(round)}}}       |        |
|              |             | {{{ps(sin)}}}         |        |
|              |             | {{{ps(sqrt)}}}        |        |
|              |             | .tan                  |        |
|              |             | {{{ps(truncate)}}}    |        |
|              |             | .e                    |        |
|              |             | .ln2                  |        |
|              |             | .ln10                 |        |
|              |             | .log2e                |        |
|              |             | .log10e               |        |
|              |             | .pi                   |        |
|              |             | .sqrt1_2              |        |
|              |             | .sqrt2                |        |
|              |             | {{{ps(sub)}}}         |        |
|              |             | {{{ps(idiv)}}}        |        |
| Stack        | x           | {{{ps(dup)}}}         | x x    |
| Conditionals | x y         | {{{ps(ne)}}}          | bool   |
|              | x y         | {{{ps(ge)}}}          | bool   |
|              | x y         | {{{ps(le)}}}          | bool   |
|              | x y         | {{{ps(gt)}}}          | bool   |
|              | bool proc   | {{{ps(if)}}}          |        |
| HTML 5       | key         | .gget                 |        |
|              | any key     | .gput                 |        |
|              | key nargs   | .gcall0               |        |
|              | key nargs   | .gcall1               |        |
|              |             | .gcanvas              | canvas |
|              | w h         | .gdim                 |        |
|              | x0 y0 x1 y1 | .gbox                 |        |

** HTML 5 canvas methods and attributes

*** Canvas methods

|   | in                                           | canvas                | out            | ps                             | pdf         |
|---+----------------------------------------------+-----------------------+----------------+--------------------------------+-------------|
| / |                                              |                       |                | <                              | <           |
|   |                                              | .save                 |                | {{{ps(gsave)}}}                | q           |
|   |                                              | .restore              |                | {{{ps(grestore)}}}             | Q           |
|   | x y                                          | .scale                |                | {{{ps(scale)}}}                | -           |
|   | angle                                        | .rotate               |                | {{{ps(rotate)}}}               | -           |
|   | x y                                          | .translate            |                | {{{ps(translate)}}}            | -           |
|   | m11 m12 m21 m22 dx dy                        | .transform            |                | -                              | cm          |
|   | m11 m12 m21 m22 dx dy                        | .setTransform         |                | -                              | -           |
|   | x0 y0 x1 y1                                  | .createLinearGradient | canvasGradient |                                |             |
|   | x0 y0 r0 x1 y1 r1                            | .createRadialGradient | canvasGradient |                                |             |
|   | image repetition                             | .createPattern        | canvasPattern  |                                |             |
|   | x y w h                                      | .clearRect            |                | {{{ps(rectclip)}}}             |             |
|   | x y w h                                      | .fillRect             |                | {{{ps(rectfill)}}}             |             |
|   | x y w h                                      | .strokeRect           |                | {{{ps(rectstroke)}}}           |             |
|   |                                              | .beginPath            |                | {{{ps(newpath)}}}              | m ?         |
|   |                                              | .closePath            |                | {{{ps(closepath)}}}            | ~ h ? ~ n ? |
|   | x y                                          | .moveTo               |                | {{{ps(moveto)}}}               | m ?         |
|   | x y                                          | .lineTo               |                | {{{ps(lineto)}}}               | l           |
|   | cpx cpy x y                                  | .quadraticCurveTo     |                |                                |             |
|   | cp1x cp1y cp2x cp2y x y                      | .bezierCurveTo        |                |                                | c           |
|   | x1 y1 x2 y2 radius                           | .arcTo                |                | {{{ps(arcto)}}}                |             |
|   | x y w h                                      | .rect                 |                | -                              | ~ re        |
|   | x y radius startAngle endAngle anticlockwise | .arc                  |                | ~ {{{ps(arc)}}} {{{ps(arcn)}}} |             |
|   |                                              | .fill                 |                | {{{ps(fill)}}}                 | ~ f ?       |
|   |                                              | .stroke               |                | {{{ps(stroke)}}}               | S           |
|   |                                              | .clip                 |                | {{{ps(clip)}}}                 | ~ W ?       |
|   | x y                                          | .isPointInPath        | boolean        |                                |             |
|   | text x y                                     | .fillText1            |                |                                |             |
|   | text x y maxWidth                            | .fillText2            |                |                                |             |
|   | text x y                                     | .strokeText1          |                |                                |             |
|   | text x y maxWidth                            | .strokeText2          |                |                                |             |
|   | text                                         | .measureText          | textMetrics    |                                |             |
|   | image dx dy                                  | .drawImage1           |                |                                |             |
|   | image dx dy dw dh                            | .drawImage2           |                |                                |             |
|   | image sx sy sw sh dx dy dw dh                | .drawImage3           |                |                                |             |
|   | imagedata                                    | .createImageData1     | imageData      |                                |             |
|   | sw sh                                        | .createImageData1     | imageData      |                                |             |
|   | sx sy sw sh                                  | .getImageData         | imageData      |                                |             |
|   | imagedata dx dy                              | .putImageData1        |                |                                |             |
|   | imagedata dx dy dirtyX dirtyY dirtyW dirtyH  | .putImageData2        |                |                                |             |

*** Canvas attributes

|   | type | attribute                 | values                                             | ps                      | pdf   |
|---+------+---------------------------+----------------------------------------------------+-------------------------+-------|
| / |      | <                         |                                                    | <                       | <     |
|   | num  | .globalAlpha              | (1.0)                                              |                         |       |
|   | str  | .globalCompositeOperation | (source-over)                                      |                         |       |
|   | any  | .strokeStyle              | (black)                                            | ~ {{{ps(setdash)}}} ?   | ~ d ? |
|   | any  | .fillStyle                | (black)                                            |                         |       |
|   | num  | .lineWidth                | (1)                                                | {{{ps(setlinewidth)}}}  | w     |
|   | str  | .lineCap                  | (butt) round square                                | ~ {{{ps(setlinecap)}}}  | J     |
|   | str  | .lineJoin                 | round bevel (miter)                                | ~ {{{ps(setlinejoin)}}} | j     |
|   | num  | .miterLimit               | (10)                                               | {{{ps(setmiterlimit)}}} | M     |
|   | num  | .shadowOffsetX            | (0)                                                |                         |       |
|   | num  | .shadowOffsetY            | (0)                                                |                         |       |
|   | num  | .shadowBlur               | (0)                                                |                         |       |
|   | str  | .shadowColor              | (transparent black)                                |                         |       |
|   | str  | .font                     | (10px sans-serif)                                  |                         |       |
|   | str  | .textAlign                | (start) end left right center                      |                         |       |
|   | str  | .textBaseline             | top hanging middle (alphabetic) ideographic bottom |                         |       |

*** Other operators

|   | in                          | canvas        | out | ps | pdf |
|---+-----------------------------+---------------+-----+----+-----|
| / |                             | <             |     |    |     |
|   | canvasGradient offset color | .addColorStop |     |    |     |

*** Other attributes

|   | dict             | type             | attribute | values | ps | pdf |
|---+------------------+------------------+-----------+--------+----+-----|
| / |                  |                  | <         |        | <  | <   |
|   | textMetrics      | num              | width     |        |    |     |
|   | imageData        | cnt              | width     |        |    |     |
|   | imageData        | cnt              | heigth    |        |    |     |
|   | imageData        | canvasPixelArray | data      |        |    |     |
|   | canvasPixelArray | cnt              | length    |        |    |     |

TODO [IndexGetter, IndexSetter] CanvasPixelArray

** PostScript operators

|   | category | in      | operator              | out |
|---+----------+---------+-----------------------+-----|
| / |          | <       | <                     | <   |
|   |          | x y [m] | {{{ps(transform)}}}   | x y |
|   |          | x y [m] | {{{ps(itransform)}}}  | x y |
|   |          | gray    | {{{ps(setgray)}}}     |     |
|   |          | r g b   | {{{ps(setrgbcolor)}}} |     |
|   |          | ???     | {{{ps(setfont)}}} ?   |     |
|   |          |         | {{{ps(clippath)}}} ?  |     |
|   |          | text    | {{{ps(show)}}} ?      |     |
|   |          | x y     | {{{ps(rlineto)}}}     |     |

** PDF operators

|   | category               | operator |                                                           |
|---+------------------------+----------+-----------------------------------------------------------|
| / |                        | <        |                                                           |
|   | General graphics state | w        | setlinewidth                                              |
|   |                        | J        | ~ setlinecap                                              |
|   |                        | j        | ~ setlinejoin                                             |
|   |                        | M        | setmiterlimit                                             |
|   |                        | d        | ~ setdash ?                                               |
|   |                        | ri       |                                                           |
|   |                        | i        | ~ {1 .min setflat}                                        |
|   |                        | gs       |                                                           |
|   | Special graphics state | q        | gsave                                                     |
|   |                        | Q        | grestore                                                  |
|   |                        | cm       | .transform                                                |
|   | Path construction      | m        | moveto                                                    |
|   |                        | l        | lineto                                                    |
|   |                        | c        | .bezierCurveTo (curveto)                                  |
|   |                        | v        | ! currentpoint cp2 p3 c {currentpoint 6 2 roll curveto}   |
|   |                        | y        | ! cp1 p3 p3 c {2 copy curveto}                            |
|   |                        | h        | closepath                                                 |
|   |                        | re       | ! x y m , x+w y l , x+w y+h l , x y+h l , h               |
|   | Path painting          | S        | stroke                                                    |
|   |                        | s        | h S                                                       |
|   |                        | f        | (fill)                                                    |
|   |                        | F        | f                                                         |
|   |                        | f*       | eofill                                                    |
|   |                        | B        | f S ! {gsave fill grestore stroke}                        |
|   |                        | B*       | f* S ! {gsave eofill grestore stroke}                     |
|   |                        | b        | h b ! {closepath gsave fill grestore stroke}              |
|   |                        | b*       | h B* ! {closepath gsave eofill grestore stroke}           |
|   |                        | n        | ~ newpath                                                 |
|   | Clipping paths         | W        | clip                                                      |
|   |                        | W*       | eoclip                                                    |
|   | Text objects           | BT       |                                                           |
|   |                        | ET       | ~ grestore                                                |
|   | Text state             | Tc       |                                                           |
|   |                        | Tw       |                                                           |
|   |                        | Tz       |                                                           |
|   |                        | TL       |                                                           |
|   |                        | Tf       |                                                           |
|   |                        | Tr       |                                                           |
|   |                        | Ts       |                                                           |
|   | Text positioning       | Td       |                                                           |
|   |                        | TD       |                                                           |
|   |                        | Tm       |                                                           |
|   |                        | T*       |                                                           |
|   | Text showing           | Tj       | ~ show                                                    |
|   |                        | TJ       |                                                           |
|   |                        | '        |                                                           |
|   |                        | "        |                                                           |
|   | Type 3 fonts           | d0       | setcharwidth                                              |
|   |                        | d1       | setcachedevice                                            |
|   | Color                  | CS       |                                                           |
|   |                        | cs       |                                                           |
|   |                        | SC       |                                                           |
|   |                        | SCN      |                                                           |
|   |                        | sc       |                                                           |
|   |                        | scn      |                                                           |
|   |                        | G        | g                                                         |
|   |                        | g        | setgray                                                   |
|   |                        | RG       | rg                                                        |
|   |                        | rg       | setrgbcolor                                               |
|   |                        | K        | k                                                         |
|   |                        | k        | setcmykcolor                                              |
|   | Shading patterns       | sh       |                                                           |
|   | Inline images          | BI       |                                                           |
|   |                        | ID       |                                                           |
|   |                        | EI       |                                                           |
|   | XObjects               | Do       |                                                           |
|   | Marked content         | MP       |                                                           |
|   |                        | DP       |                                                           |
|   |                        | BMC      |                                                           |
|   |                        | BDC      |                                                           |
|   |                        | EMC      |                                                           |
|   | Compatibility          | BX       |                                                           |
|   |                        | EX       |                                                           |

* Supported Browsers

I have tried the following browsers so far:

|   | Browser | Version    | Note                               |
|---+---------+------------+------------------------------------|
| / |         | <          |                                    |
|   | Firefox | 3.0.11     | no text drawing, linecap, linejoin |
|   | Firefox | 3.5b4pre   | no text drawing, linecap, linejoin |
|   | Opera   | 10.00 Beta | no text drawing, ugly aliasing     |
|   | Chrome  | 3.0.189.0  | arc drawing looks partially broken |

If you are using a different browser, please [[http://logand.com/contact.html][let me know]] if it works
for you.

* Limitations and Known Issues 

- many PostScript operators are still to be implemented
- only small fraction of PDF operators has been implemented
- text drawing and font related functionality has not been implemented

* Changes

2009-06-30 v0.1

- Initial version

* References

[[http://www.feiri.de/pcan/][PostCanvas]] is a RPN interpreter with many PostScript operators
implemented directly in JavaScript.  It is faster than WPS but not a
"real" PostScript.

[[http://svgkit.sourceforge.net/][SVGKit]] has a PostScript interpreter on the wish list.

Postscript is a registered trademark of [[http://www.adobe.com][Adobe Systems Incorporated]].
